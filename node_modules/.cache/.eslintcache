[{"C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\index.js":"1","C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\App.js":"2","C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\Calculator.js":"3","C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\utils.js":"4","C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\Footer.js":"5"},{"size":253,"mtime":1655053040654,"results":"6","hashOfConfig":"7"},{"size":246,"mtime":1655211106897,"results":"8","hashOfConfig":"7"},{"size":9468,"mtime":1655408008473,"results":"9","hashOfConfig":"7"},{"size":818,"mtime":1655206187702,"results":"10","hashOfConfig":"7"},{"size":273,"mtime":1655225540323,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"d3z4t1",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\index.js",[],[],[],"C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\App.js",[],[],"C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\Calculator.js",["29"],[],"import React, {useState, useEffect} from 'react'\r\nimport {iniNumState, buildExp, resolveNeg, numKeyCodes, opKeyCodes} from './utils'\r\n\r\nconst deciRegex = /\\./\r\nconst negRegex = /^-/\r\n\r\n// Initialize array of numbers in the expression\r\nvar numbers = [iniNumState]\r\n      \r\n\r\nexport default function Calculator() {\r\n    // Define states\r\n    const [numObj, setNumObj] = useState(iniNumState)   // Current number\r\n    const [dispText, setDispText] = useState('0')       // Display text\r\n    const [lastInput, setLastInput] = useState(null)    // Last input\r\n    const [fullExp, setFullExp] = useState('')          // Full expression\r\n\r\n\r\n    // Build current number\r\n    function buildNumber(event) {\r\n        let currentNum;\r\n        let val = event.target.value;\r\n\r\n        if (lastInput === 'OPERATION') {         // If last input was an operation, \r\n            currentNum = {...iniNumState};      // current number is complete, \r\n            numbers.push(numObj)                // build the next number\r\n        } else if (lastInput === 'EQUALS') {    // Else if last input was equals,\r\n            currentNum = {...iniNumState};      // start new expression\r\n            numbers = [iniNumState] \r\n        } else {                                // Otherwise, continue building current number\r\n            currentNum = {...numObj}\r\n        }\r\n\r\n        // Build number with correct format\r\n        if (val === '.') {\r\n            if (!currentNum.deci) {\r\n                if (currentNum.num === '') {\r\n                    currentNum.num = '0.'\r\n                    currentNum.deci = true;\r\n                    setNumObj(currentNum)\r\n                } else {\r\n                    currentNum.num = currentNum.num + val;\r\n                    currentNum.deci = true;\r\n                    setNumObj(currentNum)\r\n                }\r\n            }\r\n        } else if (val === '-') {\r\n            if (!currentNum.isNeg) {\r\n                if (currentNum.num === '0') {\r\n                    currentNum.num = '';\r\n                    currentNum.isNeg = true;\r\n                    setNumObj(currentNum)\r\n                } else {\r\n                    currentNum.isNeg = true\r\n                    setNumObj(currentNum)\r\n                }\r\n            }\r\n        } else if (currentNum.num === '0') {\r\n            if (val !== '0') {\r\n                currentNum.num = val\r\n                setNumObj(currentNum)\r\n            } else {\r\n                currentNum.num = '0'\r\n                setNumObj(currentNum)\r\n            }\r\n        } else {\r\n            currentNum.num = currentNum.num + val\r\n            setNumObj(currentNum)\r\n        }\r\n\r\n        // Display current number and add '-' if number is negative\r\n        currentNum.isNeg ? setDispText('-' + currentNum.num) : setDispText(currentNum.num)\r\n\r\n        // Update last input state\r\n        setLastInput('NUMBER')\r\n\r\n        // Update full expression\r\n        setFullExp(buildExp([...numbers, currentNum]))\r\n    }\r\n\r\n    // Assign operation\r\n    function handleOperator(event) {\r\n        let val = event.target.value;\r\n        let currentNum = {...numObj}\r\n\r\n        // Don't accept input if first input is an operation\r\n        if (lastInput === null  && val !== '-') {\r\n            return\r\n        }\r\n\r\n        if (val === '-') {                          // If input is '-'\r\n            if (currentNum.nextOp !== null) {       // and there is already and operation assigned, build the next number as a negative number\r\n                buildNumber(event)\r\n            } else if (currentNum.num === '') {     // there is no current number, build a negative number\r\n                buildNumber(event)\r\n            } else {                                // else, assign '-' as the operation of the current number\r\n                setLastInput('OPERATION')\r\n                currentNum.nextOp = val;\r\n                setNumObj(currentNum);\r\n                setDispText(val)\r\n            }\r\n        } else {                                    // Else, set operation of the current number\r\n            setLastInput('OPERATION')\r\n            currentNum.nextOp = val;\r\n            setNumObj(currentNum);\r\n            setDispText(val)\r\n        }\r\n\r\n        // Correct false negative number if neccessary\r\n        if (currentNum.num === '' && currentNum.nextOp !== null) {\r\n            numbers[numbers.length - 1].nextOp = val;\r\n            setNumObj(numbers[numbers.length - 1])\r\n            numbers.pop()\r\n        }\r\n    }\r\n\r\n    // Clear all\r\n    function clr() {\r\n        setNumObj(iniNumState)      // Reinitialize states\r\n        setDispText('0')\r\n        setLastInput(null)\r\n        setFullExp('')\r\n        numbers = [iniNumState]\r\n    }\r\n\r\n    // Calculate results when input is '='\r\n    function calc() {\r\n\r\n        // Complete the full expression\r\n        numbers.push(numObj)\r\n        numbers = resolveNeg(numbers)\r\n\r\n        // If there is an extra operation input at the end, remove it\r\n        if(numbers[numbers.length - 1].nextOp !== null) {\r\n            numbers[numbers.length - 1].nextOp = null;\r\n        }\r\n\r\n        // Start calculation\r\n        let numArr = numbers.slice(1)\r\n\r\n        function isMD(arr) {\r\n            return arr.map(x => x.nextOp === '*' || x.nextOp === '/')\r\n        }\r\n\r\n        let indMD;\r\n        let res;\r\n\r\n        // Prioritize multiplication and divisions\r\n        while(isMD(numArr).indexOf(true) >= 0) {\r\n            indMD = isMD(numArr).indexOf(true)\r\n            \r\n            if (numArr[indMD].nextOp === '*') {\r\n                res = Number(numArr[indMD].num) * Number(numArr[indMD + 1].num)\r\n            } else if (numArr[indMD].nextOp === '/') {\r\n                res = Number(numArr[indMD].num) / Number(numArr[indMD + 1].num)\r\n            }\r\n\r\n            let substitute = {\r\n                num: res,\r\n                nextOp:  numArr[indMD + 1].nextOp,\r\n                deci: deciRegex.test(res),\r\n                isNeg: negRegex.test(res)\r\n            }\r\n\r\n            numArr = [...numArr.slice(0, indMD), substitute, ...numArr.slice(indMD+2)]\r\n        }\r\n\r\n        // Calculate remaining additions and subtractions\r\n        while(numArr.length > 1) {\r\n            if (numArr[0].nextOp === '+') {\r\n                res = Number(numArr[0].num) + Number(numArr[1].num)\r\n            } else if (numArr[0].nextOp === '-') {\r\n                res = Number(numArr[0].num) - Number(numArr[1].num)\r\n            }\r\n\r\n            let substitute = {\r\n                num: res,\r\n                nextOp:  numArr[1].nextOp,\r\n                deci: deciRegex.test(res),\r\n                isNeg: negRegex.test(res)\r\n            }\r\n\r\n            numArr = [substitute, ...numArr.slice(2)]\r\n        }\r\n\r\n        // Update states with results\r\n        setNumObj(...numArr)\r\n        setDispText(numArr[0].num)\r\n        setLastInput('EQUALS')\r\n        numbers = [...numArr]\r\n    }\r\n\r\n    // Handles key press\r\n    function handleKeyPress(event) {\r\n        let key = event.key;\r\n        let tempEvent = {target: {value: key}}\r\n\r\n        if (numKeyCodes.indexOf(key) >= 0) {\r\n            buildNumber(tempEvent)\r\n        } else if (opKeyCodes.indexOf(key) >= 0) {\r\n            handleOperator(tempEvent)\r\n        } else if (key === '=') {\r\n            calc()\r\n        } else if (key === 'Delete') {\r\n            clr()\r\n        }\r\n    }\r\n\r\n    useEffect( () => {\r\n        window.addEventListener('keydown', handleKeyPress)\r\n        return () => window.removeEventListener('keydown', handleKeyPress)\r\n    }, [numObj])\r\n\r\n    return (\r\n        <div id=\"calculator\">\r\n            <div id=\"display-container\">\r\n                <p id=\"full-exp\">{fullExp}</p>\r\n                <p id=\"display\">{dispText}</p>\r\n            </div>\r\n\r\n            <div id=\"buttons-container\">\r\n                <button id=\"clear\" onClick={clr}>AC</button>\r\n                <button id=\"divide\" className=\"operation-btn\" onClick={handleOperator} value='/'>÷</button>\r\n                <button id=\"multiply\" className=\"operation-btn\" onClick={handleOperator} value='*'>x</button>\r\n                <button id=\"add\" className=\"operation-btn\" onClick={handleOperator} value='+'>+</button>\r\n                <button id=\"subtract\" className=\"operation-btn\" onClick={handleOperator} value='-'>-</button>\r\n                <button id=\"equals\" className=\"operation-btn\" onClick={calc}>=</button>\r\n\r\n                <button id=\"zero\" className=\"num-btn\" value={'0'} onClick={buildNumber}>0</button>\r\n                <button id=\"one\" className=\"num-btn\" value={'1'} onClick={buildNumber}>1</button>\r\n                <button id=\"two\" className=\"num-btn\" value={'2'} onClick={buildNumber}>2</button>\r\n                <button id=\"three\" className=\"num-btn\" value={'3'} onClick={buildNumber}>3</button>\r\n                <button id=\"four\" className=\"num-btn\" value={'4'} onClick={buildNumber}>4</button>\r\n                <button id=\"five\" className=\"num-btn\" value={'5'} onClick={buildNumber}>5</button>\r\n                <button id=\"six\" className=\"num-btn\" value={'6'} onClick={buildNumber}>6</button>\r\n                <button id=\"seven\" className=\"num-btn\" value={'7'} onClick={buildNumber}>7</button>\r\n                <button id=\"eight\" className=\"num-btn\" value={'8'} onClick={buildNumber}>8</button>\r\n                <button id=\"nine\" className=\"num-btn\" value={'9'} onClick={buildNumber}>9</button>\r\n\r\n                <button id=\"decimal\" className=\"num-btn\" value={'.'} onClick={buildNumber}>.</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\utils.js",[],[],"C:\\Users\\Lee Sze\\Documents\\fcc-frontend-lib-proj\\js_calculator\\js_calculator\\src\\Footer.js",[],[],{"ruleId":"30","severity":1,"message":"31","line":212,"column":8,"nodeType":"32","endLine":212,"endColumn":16,"suggestions":"33"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleKeyPress'. Either include it or remove the dependency array.","ArrayExpression",["34"],{"desc":"35","fix":"36"},"Update the dependencies array to be: [handleKeyPress, numObj]",{"range":"37","text":"38"},[7468,7476],"[handleKeyPress, numObj]"]